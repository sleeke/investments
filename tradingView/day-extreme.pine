// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© BritishBritishColumbian


//@version=4
study("Day Extreme")

// TODO
// - How to quantify success/fail?
//  - Once extreme is broken, register max change & drawdown
// - Track momentum: EMA48-1m trend >= 0.004

// Possible strategy for testing:
//  - Measure max drawdown without momentum
//  - Stop run when gain > max drawdown and drawdown becomes > max drawdown

// -------//
// Inputs //
// -------//

// The number of sessions to use for the maxima/minima
studyRange = input(       
     title="Number of sessions either side of local maxima/minima", 
     type=input.integer, 
     defval=7, 
     minval=1, 
     maxval=100)

requiredDeltaPercent = input(       
     title="percent change required for local maxima/minima", 
     type=input.float, 
     defval=0, 
     minval=0, 
     maxval=10)

// ------------//
// Plot colors //
// ------------//

priceAboveMaximaColorInput = input(#53A4F3, "Price above last maxima", input.color)
positiveColor = color.new(#51B561, 30)
positiveFadedColor = color.new(positiveColor, 70)
priceAboveMinimaColorInput = input(#825FC2, "Price above last minima", input.color)
negativeColor = color.new(#FA4040, 50)
negativeFadedColor = color.new(negativeColor, 80)

maximaDeltaColorInput = input(#53A4F3, "Maxima delta", input.color)
minimaDeltaColorInput = input(#825FC2, "Minima delta", input.color)

buyColor = color.new(#7A00FA, 50)
debugColor = color.new(#0000FF, 100)


// ---------------------------//
// Maxima/minima calculation //
// ---------------------------//

varip maximaHistory = array.new_float(2, 0.0)
varip minimaHistory = array.new_float(2, 0.0)

minimaStudyPeriod = array.new_float()
maximaStudyPeriod = array.new_float()
for i = 0 to studyRange * 2
	array.push(minimaStudyPeriod, low[i])
	array.push(maximaStudyPeriod, high[i])


localMinima = array.min(minimaStudyPeriod)
localMaxima = array.max(maximaStudyPeriod)
deltaPercent = abs(localMaxima / localMinima - 1) * 100

minimaFound = 0
maximaFound = 0

// -----------------//
// Extreme tracking //
// -----------------//

varip dayExtremes = array.new_float(2, -1.0)
varip tradeExtremes = array.new_float(2, -1.0)
varip gain = 0.0
varip drawdown = 0.0
varip minIndex = 0
varip maxIndex = 1
varip latestMinMax = 1
varip buyPrice = 0.0
varip buyBarCloseTime = 0
varip direction = 0
// varip indexOfDaysFirstBar = 0

dayMin = array.get(dayExtremes, minIndex)
dayMax = array.get(dayExtremes, maxIndex)

tradeMin = array.get(tradeExtremes, minIndex)
tradeMax = array.get(tradeExtremes, maxIndex)


if (hour < 9 or (hour == 9 and minute < 30) or hour > 15)
    // Outside trading hours; everything should be reset
    
    array.set(dayExtremes, minIndex, -1.0)
    array.set(dayExtremes, maxIndex, -1.0)
    array.set(maximaHistory, latestMinMax, -1.0)
    array.set(minimaHistory, latestMinMax, -1.0)
    array.set(tradeExtremes, minIndex, -1.0)
    array.set(tradeExtremes, maxIndex, -1.0)
    buyPrice := 0.0
    gain := 0
    drawdown := 0
    direction := 0

else if (hour < 9 or (hour == 9 and minute < 30 + studyRange * 2) or hour > 15)
    if (low < dayMin or dayMin < 0)
        array.set(dayExtremes, minIndex, low)
        ignore = true   // Hack to prevent the array assignment scrwwing with the conditionals

    else if (high > dayMax or dayMax < 0)
        array.set(dayExtremes, maxIndex, high)
        ignore = true   // Hack to prevent the array assignment scrwwing with the conditionals

else
    // Inside trading hours; game on!

    if (array.get(maximaStudyPeriod, studyRange) >= localMaxima and deltaPercent > requiredDeltaPercent)
        array.shift(maximaHistory)
        array.push(maximaHistory, localMaxima)
        maximaFound := 1

    if (array.get(minimaStudyPeriod, studyRange) <= localMinima and deltaPercent > requiredDeltaPercent)
        array.shift(minimaHistory)
        array.push(minimaHistory, localMinima)
        minimaFound := 1

    latestMinima = array.get(minimaHistory, latestMinMax)
    latestMaxima = array.get(maximaHistory, latestMinMax)

    // if (bar_index > indexOfDaysFirstBar + studyRange)
    if (minimaFound == 1)
        
        if (dayMin < 0 or latestMinima < dayMin)                // Lower minima found
            array.set(dayExtremes, minIndex, latestMinima)

    if (maximaFound == 1)
        
        if (dayMax < 0 or latestMaxima > dayMax)                // Higher maxima found
            array.set(dayExtremes, maxIndex, latestMaxima)

    if (array.get(dayExtremes, minIndex) > 0 and low < array.get(dayExtremes, minIndex) and latestMinima > 0)

        // Daily minimum is exceeded

        if (buyPrice == 0 or direction > 0)

            // New low and buy price hasn't been set (or direction has changed); set buy price

            buyPrice := low
            buyBarCloseTime := time_close("")
            direction := -1
            gain := 0
            drawdown := 0

    else if (array.get(dayExtremes, maxIndex) > 0 and high > array.get(dayExtremes, maxIndex) and latestMaxima > 0)

        // Daily maximum is exceeded

        if (buyPrice == 0 or direction < 0)

            // New high and buy price hasn't been set (or direction has changed); set buy price

            buyPrice := high
            buyBarCloseTime := time_close("")
            direction := 1
            gain := 0
            drawdown := 0

    if (buyPrice != 0.0)

        // buyPrice is set; track drawdown and max gain

        if (direction < 0)  // Heading down

            localGain = buyPrice - low
            gain := localGain
        
            if (high > tradeMin)
                if (time_close("") > buyBarCloseTime)   // Avoid drawdown on the first candle
                    localDrawdown = tradeMin - high
                    drawdown := localDrawdown
        
        else if (direction > 0)  // Heading up
        
            localGain = high - buyPrice
            gain := localGain
        
            if (low < tradeMax)
                if (time_close("") > buyBarCloseTime)   // Avoid drawdown on the first candle
                    localDrawdown = low - tradeMin
                    drawdown := localDrawdown

        // Set trade min/max
        if (tradeMin < 0)
            array.set(tradeExtremes, minIndex, min(low, buyPrice))
        else
            array.set(tradeExtremes, minIndex, min(low, tradeMin, buyPrice))

        if (tradeMax < 0)
            array.set(tradeExtremes, maxIndex, min(high, buyPrice))
        else
            array.set(tradeExtremes, maxIndex, min(high, tradeMax, buyPrice))

        ingoreReturnType = true


// --------------//
// Study outputs //
// --------------//

priceAboveLastMinima = low[studyRange] - array.get(minimaHistory, 1)
priceAboveLastMaxima = high[studyRange] - array.get(maximaHistory, 1)

minimaDiff = array.get(minimaHistory, 1) / array.get(minimaHistory, 0) - 1
maximaDiff = array.get(maximaHistory, 1) / array.get(maximaHistory, 0) - 1

minimaFound := minimaFound * (minimaDiff >= 0 ? 1 : -1)
maximaFound := maximaFound * (maximaDiff >= 0 ? 1 : -1)

exitSignal = 0.0

if priceAboveLastMinima < 0
    exitSignal := -1//abs(minimaCloseDiff)
    
enterSignal = 0.0
if exitSignal == 0.0// and exitSignal[1] == 0.0
    if priceAboveLastMaxima > 0.0 
        enterSignal := 1//max(0, maximaDiff - minimaCloseDiff, maximaCloseDiff) // max(maximaCloseDiff, minimaDiff)
        
    // if minimaDiff > 0.0 and priceAboveLastMinima > 0.0
    //     enterSignal := 1

// ------//
// Plots //
// ------//

// Gain / Drawdown
plot(drawdown, style=plot.style_columns, color = negativeFadedColor)
plot(gain, style=plot.style_columns, color = positiveFadedColor)

// Minima/maxima presence
plot(minimaFound / 2, style=plot.style_columns, color = negativeColor, offset = -studyRange)
plot(maximaFound / 2, style=plot.style_columns, color = positiveColor, offset = -studyRange)

// Debug plots
plot(direction, style=plot.style_line, color = buyColor)
plot(buyPrice, style=plot.style_line, color = buyColor)
plot(array.get(dayExtremes, minIndex), style=plot.style_line, color = negativeFadedColor, offset = -studyRange)
// plot(dayMax, style=plot.style_line, color = positiveFadedColor, offset = -studyRange)
plot(tradeMax, style=plot.style_line, color = positiveFadedColor, offset = -studyRange)
plot(tradeMin, style=plot.style_line, color = debugColor, offset = -studyRange)
